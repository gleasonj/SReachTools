% Description : Unit test script for the function
%               @LtiSystem/getHmatMeanCovForXSansInput
% 1/26/2018
%   - Tests two asserts (3)
%   - Tests one clean cases (double integrator with Gaussian disturbance) and
%     compares it with the expected results
% TODO: Have to try non-Gaussian disturbance

time_horizon = 10;
T = 0.25;
umax = 0.75;
dmax = 0.1;
mean_disturbance = 0;
covariance_disturbance = 4;
GaussianDisturbance = StochasticDisturbance('Gaussian', ...
                                             mean_disturbance, ...
                                             covariance_disturbance);
initial_state = zeros(2,1);
time_horizon = 10;

%% Incorrect initial_state given (row vector)
sys = LtiSystem(...
    'StateMatrix', [1, T; 0, 1], ...
    'InputMatrix', [T^2; T], ...
    'InputSpace', Polyhedron('lb', -umax, 'ub', umax), ...
    'DisturbanceMatrix', [T^2; T], ...
    'Disturbance', GaussianDisturbance);
correct_error_id_sent_out = 0;
try
    [H, mean_X_sans_input, cov_X_sans_input] = ...
               getHmatMeanCovForXSansInput(sys, ...
                                                        [1,1], ...
                                                        time_horizon);
catch ME
    switch ME.identifier
        case 'SReachTools:invalidArgs'
            if strcmp(ME.message, ...
                      ['Expected a sys.state_dim-dimensional', ...
                       ' column-vector for initial state'])
                correct_error_id_sent_out = 1;
            else
                error('SReachTools:internal', ...
                      'Unexpected message')
            end
        otherwise
            disp(ME)
    end
end
assert(correct_error_id_sent_out == 1, ...
       'Trying an invalid initial state (row-vector) succeeded');

%% Incorrect initial_state given (matrix)
sys = LtiSystem(...
    'StateMatrix', [1, T; 0, 1], ...
    'InputMatrix', [T^2; T], ...
    'InputSpace', Polyhedron('lb', -umax, 'ub', umax), ...
    'DisturbanceMatrix', [T^2; T], ...
    'Disturbance', GaussianDisturbance);
correct_error_id_sent_out = 0;
try
    [H, mean_X_sans_input, cov_X_sans_input] = ...
               getHmatMeanCovForXSansInput(sys, ...
                                                        eye(2), ...
                                                        time_horizon);
catch ME
    switch ME.identifier
        case 'SReachTools:invalidArgs'
            if strcmp(ME.message, ...
                      ['Expected a sys.state_dim-dimensional', ...
                       ' column-vector for initial state'])
                correct_error_id_sent_out = 1;
            else
                error('SReachTools:internal', ...
                      'Unexpected message')
            end
        otherwise
            disp(ME)
    end
end
assert(correct_error_id_sent_out == 1, ...
       'Trying an invalid initial state (matrix) succeeded');

%% Incorrect system given
sys = LtiSystem(...
    'StateMatrix', [1, T; 0, 1], ...
    'InputMatrix', [T^2; T], ...
    'InputSpace', Polyhedron('lb', -umax, 'ub', umax), ...
    'DisturbanceMatrix', [T^2; T], ...
    'Disturbance', Polyhedron('lb', -dmax, 'ub', dmax));
correct_error_id_sent_out = 0;
try
    [H, mean_X_sans_input, cov_X_sans_input] = ...
               getHmatMeanCovForXSansInput(sys, ...
                                                        initial_state, ...
                                                        time_horizon);
catch ME
%     correct_error_id_sent_out = checkExpectedError(ME, ...
%         ['getHmatMeanCovForXSansInput is for ', ...  
%          'Gaussian-perturbed LTI systems only']);
    switch ME.identifier
        case 'SReachTools:invalidArgs'
            if strcmp(ME.message, ...
                      ['getHmatMeanCovForXSansInput is for', ...  
                      ' Gaussian-perturbed LTI systems only'])
                correct_error_id_sent_out = 1;
            else
                error('SReachTools:internal', ...
                      'Unexpected message')
            end
        otherwise
            disp(ME)
    end
end
assert(correct_error_id_sent_out == 1, ...
       'Trying an invalid system (non-stochastic) succeeded');

%% Correct case (double integrator with stochastic disturbance)
sys = LtiSystem(...
    'StateMatrix', [1, T; 0, 1], ...
    'InputMatrix', [T^2; T], ...
    'InputSpace', Polyhedron('lb', -umax, 'ub', umax), ...
    'DisturbanceMatrix', [T^2; T], ...
    'Disturbance', GaussianDisturbance);
% Load Abar_saved, H_saved, G_matrix_saved expected
load('./data/getConcatMatsData.mat');
incorrect_error_id_sent_out = 0;
try
    [H, mean_X_sans_input, cov_X_sans_input, Abar, G_matrix] = ...
               getHmatMeanCovForXSansInput(sys, ...
                                           initial_state, ...
                                           time_horizon);
    assert(sum(sum(abs(Abar - Abar_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in Abar');
    assert(sum(sum(abs(H - H_matrix_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in H');
    assert(sum(sum(abs(G_matrix - G_matrix_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in G_matrix');
    assert(sum(sum(abs(mean_X_sans_input)))<1e-8, ...
           'SReachTools:internal', ...
           'Incorrect mean_X_sans_input vector');
    assert(sum(sum(abs( cov_X_sans_input - covariance_disturbance * G_matrix_saved * G_matrix_saved')))<1e-8, ...
           'SReachTools:internal', ...
           'Incorrect cov_X_sans_input');
    [H, mean_X_sans_input, cov_X_sans_input] = ...
               getHmatMeanCovForXSansInput(sys, ...
                                            initial_state, ...
                                            time_horizon);
    assert(sum(sum(abs(H - H_matrix_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in H');
    assert(sum(sum(abs(mean_X_sans_input)))<1e-8, ...
           'SReachTools:internal', ...
           'Incorrect mean_X_sans_input vector');
    assert(sum(sum(abs( cov_X_sans_input - covariance_disturbance * G_matrix_saved * G_matrix_saved')))<1e-8, ...
           'SReachTools:internal', ...
           'Incorrect cov_X_sans_input');
catch ME
    disp(ME.message)
    disp(ME.stack(1))
    incorrect_error_id_sent_out = 1;
    
    error('SReachTools:internal', ...
          'Was not expecting an error')
    throw(ME)
end
assert(incorrect_error_id_sent_out == 0, ...
       'Raised error when given a valid stochastic double integrator system');


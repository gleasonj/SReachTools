% Description : Unit test script for the function
%               @LtiSystem/getConcatMats
% 1/26/2018
%   - Tests one assert for a scalar time_horizon
%   - Tests with four clean cases (double integrator --- uncertain disturbance,
%     stochastic disturbance, disturbance-free, and control-free) and compares
%     it with the expected results

time_horizon = 10;
T = 0.25;
umax = 0.75;
dmax = 0.1;
mean_disturbance = 0;
covariance_disturbance = 1;
GaussianDisturbance = StochasticDisturbance('Gaussian', ...
                                             mean_disturbance, ...
                                             covariance_disturbance);

%% Incorrect non-scalar time_horizon given
sys = LtiSystem(...
    'StateMatrix', [1, T; 0, 1], ...
    'InputMatrix', [T^2; T], ...
    'InputSpace', Polyhedron('lb', -umax, 'ub', umax), ...
    'DisturbanceMatrix', [T^2; T], ...
    'Disturbance', Polyhedron('lb', -dmax, 'ub', dmax));
correct_error_id_sent_out = 0;
try
    [Abar,H,G_matrix] = getConcatMats(sys,[1,1]);
catch ME
    switch ME.identifier
        case 'SReachTools:invalidArgs'
            if strcmp(ME.message, ...
                      'Expected a scalar positive time_horizon')
                correct_error_id_sent_out = 1;
            else
                error('SReachTools:internal', ...
                      'Unexpected message')
            end
        otherwise
            disp(ME)
    end
end
assert(correct_error_id_sent_out == 1, ...
       'Trying a scalar time_horizon succeeded');

%% Incorrect zero time_horizon given
sys = LtiSystem(...
    'StateMatrix', [1, T; 0, 1], ...
    'InputMatrix', [T^2; T], ...
    'InputSpace', Polyhedron('lb', -umax, 'ub', umax), ...
    'DisturbanceMatrix', [T^2; T], ...
    'Disturbance', Polyhedron('lb', -dmax, 'ub', dmax));
correct_error_id_sent_out = 0;
try
    [Abar,H,G_matrix] = getConcatMats(sys,0);
catch ME
    switch ME.identifier
        case 'SReachTools:invalidArgs'
            if strcmp(ME.message, ...
                      'Expected a scalar positive time_horizon')
                correct_error_id_sent_out = 1;
            else
                error('SReachTools:internal', ...
                      'Unexpected message')
            end
        otherwise
            disp(ME)
    end
end
assert(correct_error_id_sent_out == 1, ...
       'Trying zero time horizon succeeded');

%% Correct case (double integrator with uncertain disturbance)
sys = LtiSystem(...
    'StateMatrix', [1, T; 0, 1], ...
    'InputMatrix', [T^2; T], ...
    'InputSpace', Polyhedron('lb', -umax, 'ub', umax), ...
    'DisturbanceMatrix', [T^2; T], ...
    'Disturbance', Polyhedron('lb', -dmax, 'ub', dmax));
% Load Abar_saved, H_matrix_saved, G_matrix_saved expected
load('./data/getConcatMatsData.mat');
incorrect_error_id_sent_out = 0;
try
    [Abar,H,G_matrix] = getConcatMats(sys,time_horizon);
    assert(sum(sum(abs(Abar - Abar_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in Abar');
    assert(sum(sum(abs(H - H_matrix_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in H');
    assert(sum(sum(abs(G_matrix - G_matrix_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in G_matrix');
catch ME
    disp(ME.message)
    incorrect_error_id_sent_out = 1;
    error('SReachTools:internal', ...
          'Was not expecting an error')
    throw(ME)
end
assert(incorrect_error_id_sent_out == 0, ...
       'Raised error when given a valid perturbed double integrator system');

%% Correct case (double integrator with stochastic disturbance)
sys = LtiSystem(...
    'StateMatrix', [1, T; 0, 1], ...
    'InputMatrix', [T^2; T], ...
    'InputSpace', Polyhedron('lb', -umax, 'ub', umax), ...
    'DisturbanceMatrix', [T^2; T], ...
    'Disturbance', GaussianDisturbance);
% Load Abar_saved, H_matrix_saved, G_matrix_saved expected
load('./data/getConcatMatsData.mat');
incorrect_error_id_sent_out = 0;
try
    [Abar,H,G_matrix] = getConcatMats(sys,time_horizon);
    assert(sum(sum(abs(Abar - Abar_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in Abar');
    assert(sum(sum(abs(H - H_matrix_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in H');
    assert(sum(sum(abs(G_matrix - G_matrix_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in G_matrix');
catch ME
    disp(ME.message)
    incorrect_error_id_sent_out = 1;
    error('SReachTools:internal', ...
          'Was not expecting an error')
    throw(ME)
end
assert(incorrect_error_id_sent_out == 0, ...
       'Raised error when given a valid stochastic double integrator system');

%% Correct case (control-free double integrator with uncertain disturbance)
sys = LtiSystem(...
    'StateMatrix', [1, T; 0, 1], ...
    'DisturbanceMatrix', [T^2; T], ...
    'Disturbance', Polyhedron('lb', -dmax, 'ub', dmax));
% Load Abar_saved, H_matrix_saved, G_matrix_saved expected
load('./data/getConcatMatsData.mat');
incorrect_error_id_sent_out = 0;
try
    [Abar,H,G_matrix] = getConcatMats(sys,time_horizon);
    assert(sum(sum(abs(Abar - Abar_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in Abar');
    assert(sum(sum(...
            abs(H - zeros(sys.state_dimension * time_horizon, 1)...
        )))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in H');
    assert(sum(sum(abs(G_matrix - G_matrix_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in G_matrix');
catch ME
    disp(ME.message)
    incorrect_error_id_sent_out = 1;
    error('SReachTools:internal', ...
          'Was not expecting an error')
    throw(ME)
end
assert(incorrect_error_id_sent_out == 0, ...
       'Raised error when given a valid control-free double integrator system');

%% Correct case (disturbance-free double integrator)
sys = LtiSystem(...
    'StateMatrix', [1, T; 0, 1], ...
    'InputMatrix', [T^2; T], ...
    'InputSpace', Polyhedron('lb', -umax, 'ub', umax));
% Load Abar_saved, H_matrix_saved, G_matrix_saved expected
load('./data/getConcatMatsData.mat');
incorrect_error_id_sent_out = 0;
try
    [Abar,H,G_matrix] = getConcatMats(sys,time_horizon);
    assert(sum(sum(abs(Abar - Abar_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in Abar');
    assert(sum(sum(abs(H - H_matrix_saved)))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in H');
    assert(sum(sum(...
            abs(G_matrix - zeros(sys.state_dimension * time_horizon, 1)...
        )))<1e-8, ...
           'SReachTools:internal', ...
           'Mismatch in G_matrix');
catch ME
    disp(ME.message)
    incorrect_error_id_sent_out = 1;
    error('SReachTools:internal', ...
          'Was not expecting an error')
    throw(ME)
end
assert(incorrect_error_id_sent_out == 0, ...
       ['Raised error when given a valid disturbance-free double integrator', ...
       'system']);

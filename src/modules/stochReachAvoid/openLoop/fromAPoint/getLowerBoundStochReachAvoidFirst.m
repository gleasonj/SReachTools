function [lb_stoch_reach_avoid, optimal_input_vector] =...
                           getLowerBoundStochReachAvoidFirst(sys,...
                                                        initial_state,...
                                                        safety_tube,...
                                                        target_hyperplane,...
                                                        desired_accuracy)
    % This function computes an underapproximation to the first hitting time by
    % computing the maximum of all possible terminal hitting-time problems

    % Target tubes has polyhedra T_0, T_1, ..., T_{time_horizon}
    time_horizon = length(safety_tube)-1;
    lb_stoch_reach_avoid_vec = zeros(1,time_horizon);
    optimal_input_vector_mat = cell(1,time_horizon);
    
    % Safety tube intersection with the hyperplane:
    % Complement of ax <= b is ax > b is -ax <-b
    target_hyperplane_complement = Polyhedron('H',[-target_hyperplane.A,-target_hyperplane.b]);
    safety_tube_minus_target_set = TargetTube('intersect',safety_tube,target_hyperplane_complement);
    if target_hyperplane.contains(initial_state)
        lb_stoch_reach_avoid_vec(1) = 1;
        optimal_input_vector_mat{1} = NaN;
    else        
        for time_horizon_iter = 1:time_horizon
            % Get half space representation of the safety tube and time horizon
            [concat_safety_tube_A, concat_safety_tube_b] =...
                safety_tube_minus_target_set.concat([2 time_horizon_iter]);
            concat_tube_A = [concat_safety_tube_A,                  zeros(size(concat_safety_tube_A,1),sys.state_dim);
                             zeros(1,size(concat_safety_tube_A,2)), target_hyperplane.A];
            concat_tube_b = [concat_safety_tube_b;
                             target_hyperplane.b];
            % Construct U^N 
            % GUARANTEES: Non-empty input sets (polyhedron) and scalar
            %             time_horizon_iter>0
            [concat_input_space_A, concat_input_space_b] = ...
                getConcatInputSpace(sys, ...
                    time_horizon_iter);
            % Compute H, mean_X_sans_input, cov_X_sans_input for the
            % safety_cost_function definition
            % GUARANTEES: Gaussian-perturbed LTI system (sys) and well-defined
            % initial_state and time_horizon_iter
            [H, mean_X_sans_input, cov_X_sans_input] = ...
                getHmatMeanCovForXSansInput(sys, ...
                    initial_state, ...
                    time_horizon_iter);

            [lb_stoch_reach_avoid_vec(time_horizon_iter+1), opt_input_vec] =...
                computeCcLowerBoundStochReachAvoidPwlRisk( ...
                    sys,...
                    time_horizon_iter,...
                    concat_input_space_A, ... 
                    concat_input_space_b, ...
                    concat_tube_A, ... 
                    concat_tube_b, ...
                    H, ...
                    mean_X_sans_input, ...
                    cov_X_sans_input, ...
                    desired_accuracy);
            optimal_input_vector_mat{time_horizon_iter+1}=opt_input_vec;
        end
    end
    [lb_stoch_reach_avoid, time_indx] = max(lb_stoch_reach_avoid_vec);
    optimal_input_vector = optimal_input_vector_mat{time_indx};
end
